import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Defining a custom type for modal sizes
export type typeSizes = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | 'full';

// Defining the initial state type for the modal slice
type typeInitialStates = {
    isOpen: boolean;
    type: string;
    size?: typeSizes;
    payloadData?: any;
    isCloseAllowed: boolean;
};

// Defining the initial state for the modal
const initialState: typeInitialStates = {
    isOpen: false,
    isCloseAllowed: true,
    type: '',
};

// Creating the modal slice using Redux Toolkit's createSlice function
const ModalSlice = createSlice({
    name: 'CustomTableActionModal',
    initialState: initialState,
    reducers: {
        // Action to allow the modal to be closed
        setAllowClose: (state) => {
            state.isCloseAllowed = true;
        },

        // Action to disallow the modal to be closed
        setDisallowAClose: (state) => {
            state.isCloseAllowed = false;
        },

        // Action to open the modal with a specific type, size, and optional data
        setModalOpen: (state, action: PayloadAction<{ type: string; size?: typeSizes; payloadData?: any }>) => {
            state.isOpen = true;
            state.type = action.payload.type;
            state.size = action.payload.size;
            state.payloadData = action.payload.payloadData;
        },

        // Action to close the modal (only if closing is allowed)
        setModalClose: (state) => {
            if (state.isCloseAllowed) {
                // Check if closing the modal is allowed
                state.type = '';
                state.payloadData = null;
                state.size = undefined;
                state.isOpen = false;
            }
        },

        setModalCloseType: (state, action: PayloadAction<{ type?: string }>) => {
            if (state.isCloseAllowed || state.type === action.payload.type) {
                state.isOpen = false;
                state.type = '';
                state.payloadData = null;
                state.size = undefined;
            }
        },
    },
});

// Exporting the actions generated by createSlice
export const { setModalClose, setModalOpen, setAllowClose, setDisallowAClose, setModalCloseType } = ModalSlice.actions;

// Exporting the reducer for the modal slice to be used in the root reducer
export default ModalSlice.reducer;
